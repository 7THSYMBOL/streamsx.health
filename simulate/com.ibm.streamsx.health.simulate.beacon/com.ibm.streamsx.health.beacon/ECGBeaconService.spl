namespace com.ibm.streamsx.health.beacon ;

use com.ibm.streamsx.health.ingest.physionet::PhysionetGetSignals ;
use com.ibm.streamsx.health.ingest.connector::IngestPublish ;
use com.ibm.streamsx.health.ingest.types::* ;

composite ECGBeaconService
{
	graph
		(stream<float64 value, int64 ts> PhysionetGetSignals_1_out0) as
			PhysionetGetSignals_1 = PhysionetGetSignals()
		{
			param
				recordName : "mimic2wdb/31/3109737/" ;
			output
				PhysionetGetSignals_1_out0 : value = getSignal(0), ts = getTimestamp() ;
		}

		(stream<Observation_T> Functor_2_out0) as Functor_2 =
			Functor(PhysionetGetSignals_1_out0)
		{
			logic
				state :
				{
					mutable Device_T device_ =(Device_T) { } ;
					mutable ReadingSource_T rs_ =(ReadingSource_T) { } ;
					mutable Reading_T reading_ =(Reading_T) { } ;
					mutable set<rstring> patientId_ = { } ;
				}

				onTuple PhysionetGetSignals_1_out0 :
				{
					device_.id = "Streams" ;
					device_.locationId = "" ;
					rs_.id = "ECGBeaconSource" ;
					rs_.sourceType = "Beacon" ;
					rs_.deviceId = device_.id ;
					reading_.ts = PhysionetGetSignals_1_out0.ts ;
					reading_.readingType = "ECG Lead II" ;
					reading_.value = PhysionetGetSignals_1_out0.value ;
					reading_.uom = "mV" ;
					patientId_ = { "patient-1" } ;
				}

			output
				Functor_2_out0 : device = device_, reading = reading_, readingSource = rs_,
					patientId = patientId_ ;
		}

		() as IngestPublish_3 = IngestPublish(Throttle_4_out0 as inPort0Alias)
		{
			param
				topic : "ingest-beacon-ecg" ;
		}

		(stream<Observation_T> Throttle_4_out0) as Throttle_4 =
			Throttle(Functor_2_out0)
		{
			param
				rate : 125f ;
		}

}

